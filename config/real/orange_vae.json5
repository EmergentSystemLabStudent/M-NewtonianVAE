{
  model: "LinearDynamical",

  LinearDynamical: {
    dim_x: 3,

    // regularization: true,
    decoder_free: true,

    // camera_names: ["top", "ee1", "ee2"],
    // camera_names: ["ee1", "ee2"],
    camera_names: ["ee1"],
    // camera_names: ["ee2"],
    // camera_names: ["top", "ee1"],

    // X : side

    velocity: {
      // fix_abc: [0, 0, 1],
      fix_abc: null,

      activation: "Mish",
      // ignore_u: true,
      // independent: true,
      // dim_middle: 6
    },

    transition: {
      // std: 要　大きくする必要あり KL loss が半端なくデカくなる　てかデカくなりすぎてnanになる
      // ABC学習させるとvalidのKL lossが安定して下がる　↑の話が無くなった

      std: 0.0005,
      // std: [0.0005, 0.0001, 0.0001],
      // std: 0.05,
      // std: null, 初期値依存性が大きすぎ
    },

    encoder: {
      std_function: "softplus",
      modellist: [
        {
          // model: "VisualEncoder64",
          // model_kwargs: {
          //   dim_output: 64,
          //   use_spectral_norm: true,
          // },

          // 64 がちょうど良さげや　8とかでもええ　128みたいにでかかったら相関あかんわ
          // ↑　過去の話..? 2Dと3Dは事情が違う..? 画像サイズが大きくなったらこの次元も大きくしたほうが良いっぽい
          // いや、わからん 128はcorrelationが100エポック目で崩壊することが多くなる
          // lossが0付近まで到達する
          // lossは大きい方がうまいこといくという謎

          model: "ResNet",
          model_kwargs: {
            dim_output: 128,
          },

          // model: "MobileViTWrap",
          // model_kwargs: {
          //   dim_output: 64,
          //   img_size: 256
          // },
        },
        // {
        //   model: "ResNet",
        //   model_kwargs: {
        //     dim_output: 128,
        //   },
        // },
      ],
    },

    decoder: {
      split_version: "v1",
      modellist: [
        {
          // model: "SpatialBroadcastDecoder64", // ダメダメ
          // model_kwargs: {
          //   dim_input: 64,
          // },

          model: "VanillaDecoder",
          model_kwargs: {
            dim_input: 64,
          },

          // model: "DecoderV2",
          // model_kwargs: {
          //   dim_input: 3,
          // },

          // model: "IRBDecoderWrap",
          // model_kwargs: {
          //   dim_input: 128,
          //   img_size: 224,
          // },

          // model: "DecoderV3",
          // model_kwargs: {
          //   dim_input: 64,
          //   img_size: 224,
          // },

          // model: "DecoderCWrap",
          // model_kwargs: {
          //   dim_input: 64,
          //   img_size: 64,
          //   last_fn: "range05_tanh",
          // },
        },
        // {
        //   model: "DecoderCWrap",
        //   model_kwargs: {
        //     dim_input: 64,
        //     img_size: 64,
        //     last_fn: "range05_tanh",
        //   },
        // },
      ],
    },
  },

  train: {
    path: ["../data/orange/*/224/P3/{0..99}_*"],
    batch_size: 5, // 1 is not good
    epochs: 200,
    learning_rate: 3e-4,
    max_time_length: "clip_min",
    device: "cuda",
    dtype: "float32",
    save_per_epoch: 50,
    check_value: false,
    grad_clip_norm: 1000,
    // gradscaler_args: {},
    // use_autocast: true,
    load_all: true,
  },

  valid: {
    path: ["../data/orange/*/224/P3/{100..300}_*"],
  },

  test: {
    path: ["../data/orange/*/224/P3/{100..300}_*"],
    device: "cuda",
    dtype: "float32",
  },

  path: {
    saves_dir: "../save/orange/P3/saves",
    results_dir: "../save/orange/P3/results",
    hidden_conf: "config/_hidden_conf.json5",
  },

  reconstruction: {
    episodes: 3,
    format: "mp4",
  },

  others: {
    // preprocess: "one_tenth_action",
    // beta_schedule: { linear1: [100, 2000, 0, 1] },
    // beta_schedule: { cyclical_linear: [2000, 0, 1] },
    // decoder_free: 50,
    // alpha_schedule: { linear1: [1, 80, 1, 0] },

    // pretrain: {
    //   use: true,
    //   encoder: {
    //     use: true,
    //     freeze: false,
    //   },
    //   decoder: {
    //     use: true,
    //     freeze: false,
    //   },
    // },

    // unet_mask: "save/unet/unet_weight.pth",

    keypaths: [
      "action",
      "delta",
      "position",
      ["camera", "ee1"],
      ["camera", "ee2"], //
    ],

    HandyForImage: {
      size: [224, 224],
      out_range: [0, 1],
      // src_channel_order: "CHW",
      // src_reverse_color_order: true,
      // out_reverse_color_order: true,
    },

    // no_correlation_each_epoch: true,
  },
}
